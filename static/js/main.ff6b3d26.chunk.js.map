{"version":3,"sources":["EmailForm.tsx","providers/providersContext.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EmailForm","onSetEmail","useState","email","setEmail","style","display","gap","onSubmit","event","preventDefault","TextField","id","label","type","value","onChange","target","Button","variant","color","providersContext","createContext","App","providers","useContext","Container","Typography","gutterBottom","forEach","provider","trackEmail","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAOaA,EAAsC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpD,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAOA,OACE,uBAAMC,MAAO,CAAEC,QAAS,OAAQC,IAAK,OAASC,SANb,SAACC,GAClCA,EAAMC,iBACNT,EAAWE,IAIX,UACE,cAACQ,EAAA,EAAD,CACEC,GAAG,QACHC,MAAM,QACNC,KAAK,QACLC,MAAOZ,EACPa,SAAU,SAACP,GAAD,OAAWL,EAASK,EAAMQ,OAAOF,UAE7C,cAACG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUN,KAAK,SAAjD,yBCrBOO,EAAmBC,wBAA0B,ICkB3CC,MAff,WACE,IAAMC,EAAYC,qBAAWJ,GAI7B,OACE,eAACK,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYR,QAAQ,KAAKS,cAAY,EAArC,6BAGA,cAAC,EAAD,CAAW3B,WARf,SAAkBE,GAChBqB,EAAUK,SAAQ,SAACC,GAAD,OAAcA,EAASC,WAAW5B,aCKzC6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ff6b3d26.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\nimport React, { FormEventHandler, FunctionComponent, useState } from \"react\";\n\ninterface Props {\n  onSetEmail: (email: string) => void;\n}\n\nexport const EmailForm: FunctionComponent<Props> = ({ onSetEmail }) => {\n  const [email, setEmail] = useState(\"\");\n\n  const onSubmit: FormEventHandler = (event) => {\n    event.preventDefault();\n    onSetEmail(email);\n  };\n\n  return (\n    <form style={{ display: \"flex\", gap: \"4px\" }} onSubmit={onSubmit}>\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        type=\"email\"\n        value={email}\n        onChange={(event) => setEmail(event.target.value)}\n      />\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n        Sign up\n      </Button>\n    </form>\n  );\n};\n","import { createContext } from \"react\";\nimport { Provider } from \"./Provider\";\n\nexport const providersContext = createContext<Provider[]>([]);\n","import \"fontsource-roboto\";\nimport React, { useContext } from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { EmailForm } from \"./EmailForm\";\nimport { providersContext } from \"./providers/providersContext\";\n\nfunction App() {\n  const providers = useContext(providersContext);\n  function setEmail(email: string) {\n    providers.forEach((provider) => provider.trackEmail(email));\n  }\n  return (\n    <Container>\n      <Typography variant=\"h2\" gutterBottom>\n        Data collection\n      </Typography>\n      <EmailForm onSetEmail={setEmail} />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}