{"version":3,"sources":["reportWebVitals.ts","components/EmailForm/EmailForm.tsx","providers/providersContext.ts","components/NavBar.tsx","components/Page.tsx","TrackingView/TrackingView.tsx","InquiryView/InquiryView.tsx","providers/useProviderData.ts","DeletionView/DeletionView.tsx","App.tsx","providers/MailChimpProvider.ts","providers/mailChimpApiKey.ts","ConnectedApp.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","EmailForm","onSetEmail","useState","email","setEmail","style","display","gap","onSubmit","event","preventDefault","TextField","id","label","type","value","onChange","target","Button","variant","color","providersContext","createContext","NavBar","AppBar","position","Toolbar","component","Link","to","Page","children","Container","TrackingView","providers","useContext","Typography","gutterBottom","forEach","provider","trackEmail","InquiryView","providerData","setProviderData","useEffect","map","a","fetchDetails","data","oldData","name","Object","values","useProviderData","Box","m","flexWrap","Card","maxWidth","CardContent","JSON","stringify","DeletionView","submitting","setSubmitting","Promise","all","deleteMe","run","App","path","MailChimpProvider","apiKey","corsProxy","instance","dataCenterRegex","dataCenter","exec","this","axios","create","baseURL","timeout","auth","username","password","get","response","undefined","exact_matches","members","_links","listId","lists","post","email_address","status","update_existing","me","list_id","mailChimpApiKey","process","Math","random","ConnectedApp","Provider","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a4704b0.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Button, TextField } from \"@material-ui/core\";\nimport React, { FormEventHandler, FunctionComponent, useState } from \"react\";\n\ninterface Props {\n  onSetEmail: (email: string) => void;\n}\n\nexport const EmailForm: FunctionComponent<Props> = ({ onSetEmail }) => {\n  const [email, setEmail] = useState(\"\");\n\n  const onSubmit: FormEventHandler = (event) => {\n    event.preventDefault();\n    onSetEmail(email);\n  };\n\n  return (\n    <form style={{ display: \"flex\", gap: \"4px\" }} onSubmit={onSubmit}>\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        type=\"email\"\n        value={email}\n        onChange={(event) => setEmail(event.target.value)}\n      />\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n        Confirm\n      </Button>\n    </form>\n  );\n};\n","import { createContext } from \"react\";\nimport { Provider } from \"./Provider\";\n\nexport const providersContext = createContext<Provider[]>([]);\n","import React, { FunctionComponent } from \"react\";\nimport { AppBar, Button, Toolbar } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nexport const NavBar: FunctionComponent = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Button color=\"inherit\" component={Link} to=\"/track-me\">\n        Track me\n      </Button>\n      <Button color=\"inherit\" component={Link} to=\"/inquiry\">\n        Inquire\n      </Button>\n      <Button color=\"inherit\" component={Link} to=\"/delete-me\">\n        Delete me\n      </Button>\n    </Toolbar>\n  </AppBar>\n);\n","import React, { FunctionComponent } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { NavBar } from \"./NavBar\";\n\nexport const Page: FunctionComponent = ({ children }) => (\n  <>\n    <NavBar />\n    <Container>{children!}</Container>\n  </>\n);\n","import { Typography } from \"@material-ui/core\";\nimport { EmailForm } from \"../components/EmailForm/EmailForm\";\nimport React, { useContext } from \"react\";\nimport { providersContext } from \"../providers/providersContext\";\nimport { Page } from \"../components/Page\";\n\nexport function TrackingView() {\n  const providers = useContext(providersContext);\n  function trackEmail(email: string) {\n    providers.forEach((provider) => provider.trackEmail(email));\n  }\n  return (\n    <Page>\n      <Typography variant=\"h2\" gutterBottom>\n        Data collection\n      </Typography>\n      <EmailForm onSetEmail={trackEmail} />\n    </Page>\n  );\n}\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { EmailForm } from \"../components/EmailForm/EmailForm\";\nimport { Page } from \"../components/Page\";\nimport { useProviderData } from \"../providers/useProviderData\";\n\nexport const InquiryView: FunctionComponent = () => {\n  const [email, setEmail] = useState<string | null>(null);\n  const providerData = useProviderData(email);\n  return (\n    <Page>\n      <Typography variant=\"h2\" gutterBottom>\n        Inquiries\n      </Typography>\n      <EmailForm onSetEmail={setEmail} />\n      <Box m={1} style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"4px\" }}>\n        {providerData.map((data) => (\n          <Card key={data.name} style={{ maxWidth: \"600px\" }}>\n            <CardContent>\n              <Typography variant=\"h3\" gutterBottom>\n                {data.name}\n              </Typography>\n              {data.data === null ? (\n                <Typography variant=\"body1\">No data</Typography>\n              ) : (\n                <pre>{JSON.stringify(data.data, null, 2)}</pre>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </Box>\n    </Page>\n  );\n};\n","import { useContext, useEffect, useState } from \"react\";\nimport { providersContext } from \"./providersContext\";\n\ninterface ProviderData {\n  name: string;\n  data: unknown;\n}\n\nexport function useProviderData(email: string | null) {\n  const providers = useContext(providersContext);\n  const [providerData, setProviderData] = useState<{\n    [providerName: string]: ProviderData;\n  }>({});\n  useEffect(() => {\n    if (email === null) {\n      return;\n    }\n    providers.map(async (provider) => {\n      const data = await provider.fetchDetails(email);\n      setProviderData((oldData) => ({\n        ...oldData,\n        [provider.name]: {\n          name: provider.name,\n          data,\n        },\n      }));\n    });\n  }, [email, providers]);\n  return Object.values(providerData);\n}\n","import React, { FunctionComponent, useContext, useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { EmailForm } from \"../components/EmailForm/EmailForm\";\nimport { Page } from \"../components/Page\";\nimport { providersContext } from \"../providers/providersContext\";\n\nexport const DeletionView: FunctionComponent = () => {\n  const providers = useContext(providersContext);\n  const [submitting, setSubmitting] = useState(false);\n  function deleteEmail(email: string) {\n    async function run() {\n      setSubmitting(true);\n      await Promise.all(\n        providers.map(async (provider) => await provider.deleteMe(email))\n      );\n      setSubmitting(false);\n    }\n    run();\n  }\n  return (\n    <Page>\n      <Typography variant=\"h2\" gutterBottom>\n        Inquiries\n      </Typography>\n      <EmailForm onSetEmail={deleteEmail} />\n      {submitting && \"Submitting, please wait\"}\n    </Page>\n  );\n};\n","import \"fontsource-roboto\";\nimport React from \"react\";\nimport { TrackingView } from \"./TrackingView/TrackingView\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { InquiryView } from \"./InquiryView/InquiryView\";\nimport { DeletionView } from \"./DeletionView/DeletionView\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path=\"/track-me\">\n        <TrackingView />\n      </Route>\n      <Route path=\"/inquiry\">\n        <InquiryView />\n      </Route>\n      <Route path=\"/delete-me\">\n        <DeletionView />\n      </Route>\n      <Redirect to=\"/track-me\" />\n    </Switch>\n  );\n}\n","import { Provider } from \"./Provider\";\nimport axios, { AxiosInstance } from \"axios\";\n\nexport class MailChimpProvider implements Provider {\n  name = \"MailChimp\";\n\n  private instance: AxiosInstance;\n\n  constructor(apiKey: string, corsProxy: string = \"\") {\n    const dataCenterRegex = /-(.+)$/g;\n    const dataCenter = dataCenterRegex.exec(apiKey)![1];\n    this.instance = axios.create({\n      baseURL: `${corsProxy}https://${dataCenter}.api.mailchimp.com/3.0`,\n      timeout: 5000,\n      auth: {\n        username: \"anystring\",\n        password: apiKey,\n      },\n    });\n  }\n\n  async fetchDetails(email: string): Promise<Record<string, string> | null> {\n    const response = await this.instance.get(`/search-members?query=${email}`);\n    const data = response.data.exact_matches.members[0];\n    if (data === undefined) {\n      return null;\n    }\n    delete data._links;\n    return data;\n  }\n\n  async trackEmail(email: string): Promise<void> {\n    const response = await this.instance.get(\"/lists\");\n    const listId = response.data.lists[0].id;\n    await this.instance.post(`/lists/${listId}`, {\n      members: [{ email_address: email, status: \"subscribed\" }],\n      update_existing: true,\n    });\n  }\n\n  async deleteMe(email: string): Promise<void> {\n    const me = await this.fetchDetails(email);\n    if (me === null) {\n      return;\n    }\n    const { list_id, id } = me;\n    await this.instance.post(\n      `/lists/${list_id}/members/${id}/actions/delete-permanent`,\n      {\n        members: [{ email_address: email, status: \"unsubscribed\" }],\n        update_existing: true,\n      }\n    );\n  }\n}\n","export const mailChimpApiKey =\n  process.env.REACT_APP_MAILCHIMP_API_KEY_PART_ONE! +\n  (Math.random() > -1 ? process.env.REACT_APP_MAILCHIMP_API_KEY_PART_TWO! : \"\");\n","import { App } from \"./App\";\nimport React from \"react\";\nimport { providersContext } from \"./providers/providersContext\";\nimport { MailChimpProvider } from \"./providers/MailChimpProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { mailChimpApiKey } from \"./providers/mailChimpApiKey\";\n\nexport function ConnectedApp() {\n  return (\n    <providersContext.Provider\n      value={[\n        new MailChimpProvider(\n          mailChimpApiKey,\n          process.env.REACT_APP_CORS_PROXY!\n        ),\n      ]}\n    >\n      <BrowserRouter basename=\"/privacy\">\n        <App />\n      </BrowserRouter>\n    </providersContext.Provider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ConnectedApp } from \"./ConnectedApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectedApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}